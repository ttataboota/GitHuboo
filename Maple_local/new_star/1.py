import numpy as np

# 주어진 전이 행렬 (31x31)
star = np.array([
    [0.0025, 0.9975, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0.0550, 0.9450, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0.1075, 0.8925, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0.1075, 0.8925, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0.1600, 0.8400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0.2125, 0.7875, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0.2650, 0.7350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0.3175, 0.6825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0.3700, 0.6300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4225, 0.5775, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4750, 0.5250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5275, 0.4725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5800, 0.4200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6325, 0.3675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6850, 0.3150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0210, 0, 0, 0.6640, 0.3150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0210, 0, 0, 0, 0.6640, 0.3150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0680, 0, 0, 0, 0, 0.7745, 0.1575, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0680, 0, 0, 0, 0, 0, 0.7745, 0.1575, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0850, 0, 0, 0, 0, 0, 0, 0.7575, 0.1575, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1050, 0, 0, 0, 0, 0, 0, 0, 0.5800, 0.3150, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1275, 0, 0, 0, 0, 0, 0, 0, 0, 0.7150, 0.1575, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1700, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6725, 0.1575, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.7150, 0.1050, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.7150, 0.1050, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.7150, 0.1050, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1860, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.7405, 0.0735, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1900, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.7575, 0.0525, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1940, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.7745, 0.0315, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1980, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.7915, 0.0105],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0]
])


def expected_steps(goal):
    """
    goal: 목표 흡수 상태의 인덱스 (0부터 시작)
    시작 상태 Level 0에서 목표 상태에 도달하기까지의 기대 단계를 계산합니다.
    """
    # goal+1 크기의 전이 행렬 T 추출
    T = star[:goal+1, :goal+1].copy()
    # 목표 상태를 흡수 상태로 지정
    T[goal, :] = 0
    T[goal, goal] = 1

    # 만약 goal이 0이면 이미 흡수 상태이므로 기대 단계 수는 0
    if goal == 0:
        return 0

    # 일시적 상태: 인덱스 0부터 goal-1까지
    Q = T[:goal, :goal]
    I = np.eye(goal)  # goal x goal 항등 행렬

    # 기본 행렬: N = (I - Q)^(-1)
    N = np.linalg.inv(I - Q)
    # 기대 단계 수: t = N * 1 (각 일시적 상태에서 absorption까지 걸리는 기대 단계 수)
    t = N @ np.ones((goal, 1))
    return t[18, 0]



for i in range(19,23):
    exp_steps_level = expected_steps(i)
    print(f"시작 상태 Level 22에서 Level {i}에 도달하기까지의 기대 단계 수: {exp_steps_level:.4f}")
